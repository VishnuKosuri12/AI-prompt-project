AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate Infrastructure for the ChemTrack application, including cluster, networking, IAM, and base services.'

# ------------------------------------------------------------------
# Parameters
# ------------------------------------------------------------------
Parameters:
  AppName:
    Type: String
    Description: Name of the application (used for resource naming and tags).
    Default: chemtrack
  AppURL:
    Type: String
    Description: Root application domain name.
    Default: "chemtrack.767397980456.aws.glpoly.net"
  VpcId:
    Type: String
    Description: VPC ID where the ECS cluster will be deployed.
    Default: vpc-019e35a7f8ca205e5 # Placeholder
  PrivateSubnet1:
    Type: String
    Description: First private subnet ID for ECS tasks.
    Default: subnet-08de8ae010ebfa1f3 # Placeholder
  PrivateSubnet2:
    Type: String
    Description: Second private subnet ID for ECS tasks.
    Default: subnet-0205ddf1053073b5c # Placeholder
  IntranetSubnet1:
    Type: String
    Description: First public or intranet subnet ID for the internal ALB.
    Default: subnet-0ee959776d1683aa5 # Placeholder
  IntranetSubnet2:
    Type: String
    Description: Second public or intranet subnet ID for the internal ALB.
    Default: subnet-07257f93f815ce77c # Placeholder
  AccessLogsBucket:
    Type: String
    Description: S3 bucket name for ALB access logs. Must exist prior to deployment.
    Default: chemtrack-access-logs

# ------------------------------------------------------------------
# Resources
# ------------------------------------------------------------------
Resources:

## ECS Cluster & Service Discovery
------------------------------------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-cluster

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ${AppName}.local
      Description: !Sub "Service discovery namespace for ${AppName} services"
      Vpc: !Ref VpcId

## IAM Roles
------------------------------------------------------------------
  # Role for Fargate to pull images, publish logs, and use Secrets/SSM
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # Essential policy for Fargate Task Execution
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${AppName}-secrets-ssm-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:chemtrack-db-app-user*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:env-vars*
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chemtrack-api-key

  # Role for the application running inside the container
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-task-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Application access to Secrets and SSM for runtime configuration
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:chemtrack-db-app-user*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:env-vars*
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chemtrack-api-key
              # Task access to CloudWatch Logs (redundant if using Execution Role but good for explicit permissions)
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AppName}*:*

## Networking: Security Groups
------------------------------------------------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the internal ALB (HTTP/HTTPS access from VPC only)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allows access from a specific internal CIDR block (assuming 10.0.0.0/8 is your VPC range)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Fargate tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allows traffic from the ALB on ports 8000 and 80 (for Nginx/App containers)
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup # Recommended: restrict to ALB's SG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        # Optional: Internal communication from other parts of the VPC (e.g., specific subnets)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.221.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-sg

## Application Load Balancer
------------------------------------------------------------------
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AppName}-alb
      Scheme: internal # Deploying in Intranet subnets suggests internal
      Type: application
      Subnets:
        - !Ref IntranetSubnet1
        - !Ref IntranetSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: !Sub ${AppName}-alb-logs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb

  # ALB Listeners
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301 # Permanent redirect to HTTPS

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !ImportValue chemtrack-certificate-arn # Assumes cert is created elsewhere
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup # Default to the main app
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06 # Modern security policy

## Target Groups
------------------------------------------------------------------
  # Target Group for the main application (default)
  MainTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-main-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-main-tg

  # Target Group for the login service
  LoginTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-login-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-login-tg

  # Target Group for the backend API service
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-backend-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-backend-tg

  # Target Group for static files (Nginx)
  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-nginx-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-nginx-tg

## ALB Listener Rules
------------------------------------------------------------------
  LoginRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 5
      Conditions:
        - Field: path-pattern
          Values: [ "/login*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoginTargetGroup

  BackendRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values: [ "/backend*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  NginxRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 15
      Conditions:
        - Field: path-pattern
          Values: [ "/static*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref NginxTargetGroup

  MainRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 1 # Lowest priority, acts as a catch-all
      Conditions:
        - Field: path-pattern
          Values: [ "/" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup

## ECS Task Definitions
------------------------------------------------------------------
  # Login Service
  LoginTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-login
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Sub ${AppName}-login-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/chemtrack/login:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: BASE_URL
              Value: !Ref AppURL
            - Name: SECRET_KEY # WARNING: Hardcoding secrets is bad practice, use Secrets Manager!
              Value: '64df77320c1b5b56396028e0dfc01deb'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${AppName}-login
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-login-task

  # Nginx Service
  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-nginx
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn:
