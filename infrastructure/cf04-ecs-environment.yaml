AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for ChemTrack ECS Environment'

Parameters:
  AppName:
    Type: String
    Description: Name of the application
    Default: chemtrack
  AppURL:
    Type: String
    Description: root application url
    Default: "chemtrack.767397980456.aws.glpoly.net"
  VpcId:
    Type: String
    Description: VPC ID where the ECS cluster will be deployed
    Default: vpc-019e35a7f8ca205e5

  PrivateSubnet1:
    Type: String
    Description: First private subnet ID for the ECS cluster
    Default: subnet-08de8ae010ebfa1f3

  PrivateSubnet2:
    Type: String
    Description: Second private subnet ID for the ECS cluster
    Default: subnet-0205ddf1053073b5c

  IntranetSubnet1:
    Type: String
    Description: First intranet subnet ID for the ALB
    Default: subnet-0ee959776d1683aa5

  IntranetSubnet2:
    Type: String
    Description: Second intranet subnet ID for the ALB
    Default: subnet-07257f93f815ce77c

  AccessLogsBucket:
    Type: String
    Description: S3 bucket for ALB access logs
    Default: chemtrack-access-logs

Resources:
  # Service Discovery Namespace
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub ${AppName}.local
      Description: !Sub "Service discovery namespace for ${AppName} services"
      Vpc: !Ref VpcId

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-cluster

  # CloudWatch Log Groups
  LoginLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}-login
      RetentionInDays: 7

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}-backend
      RetentionInDays: 7

  MainLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}-main
      RetentionInDays: 7

  NginxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}-nginx
      RetentionInDays: 7


  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub ${AppName}-secrets-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:chemtrack-db-app-user*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:env-vars*
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chemtrack-api-key

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-task-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:chemtrack-db-app-user*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:env-vars*
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chemtrack-api-key
              # Add permissions for CloudWatch Logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AppName}*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AppName}*:log-stream:*

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.221.0.0/16
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-sg

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AppName}-alb
      Scheme: internal
      Type: application
      Subnets:
        - !Ref IntranetSubnet1
        - !Ref IntranetSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: !Sub ${AppName}-alb-logs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb

  # ALB Listeners
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !ImportValue chemtrack-certificate-arn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  # Target Groups
  LoginTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-login-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-login-tg

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-nginx-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-nginx-tg

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-backend-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-backend-tg

  MainTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-main-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-main-tg

  # ALB Rules
  LoginRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 5
      Conditions:
        - Field: path-pattern
          Values:
            - /login*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoginTargetGroup

  NginxRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 15
      Conditions:
        - Field: path-pattern
          Values:
            - /static*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref NginxTargetGroup

  BackendRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - /backend*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  MainRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup

  # ECS Task Definitions
  LoginTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-login
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Sub ${AppName}-login-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/chemtrack/login:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          Environment:
            - Name: BASE_URL
              Value: !Ref AppURL
            - Name: SECRET_KEY
              Value: '64df77320c1b5b56396028e0dfc01deb'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LoginLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-login-task

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-nginx
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Sub ${AppName}-nginx-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/chemtrack/nginx:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NginxLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-nginx-task

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-backend
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Sub ${AppName}-backend-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/chemtrack/backend:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: API_KEY_SECURITY
              Value: "enabled"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-backend-task

  MainTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-main
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${AppName}-main-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/chemtrack/main:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          Environment:
            - Name: BASE_URL
              Value: !Ref AppURL
            - Name: SECRET_KEY
              Value: '64df77320c1b5b56396028e0dfc01deb'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MainLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-main-task



  # ECS Services
  LoginService:
    Type: AWS::ECS::Service
    DependsOn: LoginRule
    Properties:
      ServiceName: !Sub ${AppName}-login-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LoginTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-login-container
          ContainerPort: 8000
          TargetGroupArn: !Ref LoginTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-login-service
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub ${AppName}.local

  NginxService:
    Type: AWS::ECS::Service
    DependsOn: NginxRule
    Properties:
      ServiceName: !Sub ${AppName}-nginx-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref NginxTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-nginx-container
          ContainerPort: 80
          TargetGroupArn: !Ref NginxTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-nginx-service

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendRule
    Properties:
      ServiceName: !Sub ${AppName}-backend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-backend-container
          ContainerPort: 8000
          TargetGroupArn: !Ref BackendTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-backend-service
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub ${AppName}.local

  MainService:
    Type: AWS::ECS::Service
    DependsOn: MainRule
    Properties:
      ServiceName: !Sub ${AppName}-main-service
      Cluster: !GetAtt ECSCluster.Arn
      TaskDefinition: !Ref MainTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-main-container
          ContainerPort: 8000
          TargetGroupArn: !Ref MainTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-main-service
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub ${AppName}.local

  # DNS Record
  ApplicationDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: 767397980456.aws.glpoly.net.
      Name: !Ref AppURL
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt ApplicationLoadBalancer.DNSName

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AppName}-cluster-name

  ClusterArn:
    Description: The ARN of the ECS cluster
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub ${AppName}-cluster-arn

  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AppName}-alb-dns-name

  LoadBalancerArn:
    Description: The ARN of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AppName}-alb-arn

  ApplicationURL:
    Description: The URL of the application
    Value: "https://chemtrack.767397980456.aws.glpoly.net"
    Export:
      Name: !Sub ${AppName}-url

  ECSTaskExecutionRoleArn:
    Description: The ARN of the ECS task execution role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AppName}-ecs-task-execution-role-arn

  ECSTaskRoleArn:
    Description: The ARN of the ECS task role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${AppName}-ecs-task-role-arn

  HTTPSListenerArn:
    Description: The ARN of the HTTPS listener
    Value: !Ref HTTPSListener
    Export:
      Name: !Sub ${AppName}-https-listener-arn

  ECSSecurityGroupId:
    Description: The ID of the ECS security group
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${AppName}-ecs-security-group-id

  MainServiceArn:
    Description: The ARN of the Main ECS service
    Value: !Ref MainService
    Export:
      Name: !Sub ${AppName}-main-service-arn

  MainTaskDefinitionArn:
    Description: The ARN of the Main Task Definition
    Value: !Ref MainTaskDefinition
    Export:
      Name: !Sub ${AppName}-main-task-definition-arn

  MainTargetGroupArn:
    Description: The ARN of the Main Target Group
    Value: !Ref MainTargetGroup
    Export:
      Name: !Sub ${AppName}-main-target-group-arn

  NginxServiceArn:
    Description: The ARN of the Nginx ECS service
    Value: !Ref NginxService
    Export:
      Name: !Sub ${AppName}-nginx-service-arn

  NginxTaskDefinitionArn:
    Description: The ARN of the Nginx Task Definition
    Value: !Ref NginxTaskDefinition
    Export:
      Name: !Sub ${AppName}-nginx-task-definition-arn

  NginxTargetGroupArn:
    Description: The ARN of the Nginx Target Group
    Value: !Ref NginxTargetGroup
    Export:
      Name: !Sub ${AppName}-nginx-target-group-arn
      
  ServiceDiscoveryNamespaceId:
    Description: The ID of the service discovery namespace
    Value: !Ref ServiceDiscoveryNamespace
    Export:
      Name: !Sub ${AppName}-service-discovery-namespace-id
